model = createpde();
importGeometry(model,'tisslayers2.stl');
h = pdegplot(model,'FaceLabels','on','FaceAlpha',0.5);

%% Apply boundary conditions
%Outer, insulating boundaries
applyBoundaryCondition(model,'face',1:10,'g',0.0,'q',0.0); % the outer model boundarys have no change in electric current, so it is always zero here and beyond? 
%applyBoundaryCondition(model,'face',[2 5 3 6],'g',0.0,'q',0.0);
%disp(model.IsTimeDependent)

%Electrode-tissue boundary
applyBoundaryCondition(model,'face',[11,12],'h',1.0,'r',1.0)https://www.evernote.com/shard/s514/nl/2147483647/14009f2c-7b70-49d5-9cfe-ffc43d126d50/; %the 'r' 1.0 sets up a 1(mv?) voltage here
applyBoundaryCondition(model,'face',[13,14],'h',1.0,'r',-1.0); %the 'r' -1.0 sets up a -1 (mv?) voltage at this electrode. 
% the two opposing currents set up the electric field. If this can be time
% varying then this would be potentially how to make tACS and tRNS. From
% looking throught the documentation, it seems that the way to specify a
% non-constant boundary condition is to specify it as a function, so 'r',
% @myrfun
%disp(model.IsTimeDependent)

% the coefficients modify the equation being solved. I think m and d being
% zero makes this time independent. Need to check though!
specifyCoefficients(model,'m',0, 'd',0, 'c',1, 'a',0, 'f',0);

%% Set initial conditions
 % this is necessary for a tme dependent model
%  if model.IsTimeDependent
%      setInitialConditions(model,0,1); %first condition is u, then m...
%  end


%% Solve model

disp(model.IsTimeDependent)
generateMesh(model);
disp(model.IsTimeDependent)
result = solvepde(model);

 u = result.NodalSolution; % so u is the solution
 
 [X,Y,Z] = meshgrid(-8:10,-3:1,-2:10);
 V = interpolateSolution(result,X,Y,Z);
V = reshape(V,size(X));

pdeplot3D(model,'ColorMapData', u);

% figure
% colormap jet
% contourslice(X,Y,Z,V,[],-3:1)
% xlabel('x')
% ylabel('y')
% zlabel('z')
% colorbar
% axis equal


